#- [ 'setMemberIdentityProcessor',                 [ '@App\Infrastructure\Amqp\ResourceProcessor\MemberIdentityProcessor'] ]
#- [ 'setMemberProfileCollectedEventRepository',   [ '@App\Infrastructure\Curation\Repository\MemberProfileCollectedEventRepository'] ]

imports:
    - { resource: services/api.yml }
    - { resource: services/controller.yml }
    - { resource: services/member_subscribee.yml }
    - { resource: services/member_subscription.yml }
    - { resource: services/repository.yml }
    - { resource: services/persistence.yml }
    - { resource: services/security.yml }

services:
    _defaults:
        autowire:       true # Automatically injects dependencies in your services.
        autoconfigure:  true # Automatically registers your services as commands, event subscribers, etc.

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Trends/Infrastructure/Controller/.*.php'
        tags: ['controller.service_arguments']

    App\Twitter\Infrastructure\Log\StatusLogger:
        class: 'App\Twitter\Infrastructure\Log\StatusLogger'
        arguments:
            - '@App\Twitter\Infrastructure\Translation\Translator'
            - '@monolog.logger.status'

    App\Twitter\Infrastructure\Publication\Formatter\PublicationFormatter:
        public: true
        class: 'App\Twitter\Infrastructure\Publication\Formatter\PublicationFormatter'
        calls:
            - [ 'setStatusAccessor',   [ '@App\Twitter\Infrastructure\Http\Accessor\StatusAccessor' ] ]
            - [ 'setStatusRepository', [ '@App\Twitter\Infrastructure\Http\Repository\StatusRepository' ] ]

    App\Twitter\Infrastructure\Http\Repository\StatusRepository:
        class:  'App\Twitter\Infrastructure\Http\Repository\StatusRepository'
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'App\Twitter\Infrastructure\Http\Entity\Status'
        calls:
            - [ 'setMemberRepository',       [ '@user_manager' ] ]
            - [ 'setPublicationRepository',  [ '@App\Twitter\Infrastructure\Publication\Repository\PublicationRepository' ] ]
            - [ 'setStatusLogger',           [ '@App\Twitter\Infrastructure\Log\StatusLogger' ] ]
            - [ 'setStatusPersistence',      [ '@App\Twitter\Infrastructure\Publication\Persistence\StatusPersistence' ] ]
            - [ 'setTaggedStatusRepository', [ '@App\Twitter\Infrastructure\Repository\Status\TaggedStatusRepository' ] ]
            - [ 'setTimelyStatusRepository', [ '@repository.timely_status' ] ]
        properties:
            appLogger:                '@logger'
            archivedStatusRepository: '@App\Twitter\Infrastructure\Http\Repository\ArchivedStatusRepository'
            connection:               '@doctrine.dbal.default_connection'
            registry:                 '@doctrine'

    App\Twitter\Infrastructure\Http\Repository\ArchivedStatusRepository:
        class:  'App\Twitter\Infrastructure\Http\Repository\ArchivedStatusRepository'
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'App\Twitter\Infrastructure\Http\Entity\ArchivedStatus'
        calls:
            - [ 'setMemberRepository',       [ '@user_manager' ] ]
            - [ 'setPublicationRepository',  [ '@App\Twitter\Infrastructure\Publication\Repository\PublicationRepository' ] ]
            - [ 'setStatusLogger',           [ '@App\Twitter\Infrastructure\Log\StatusLogger' ] ]
            - [ 'setStatusPersistence',      [ '@App\Twitter\Infrastructure\Publication\Persistence\StatusPersistence' ] ]
            - [ 'setTaggedStatusRepository', [ '@App\Twitter\Infrastructure\Repository\Status\TaggedStatusRepository' ] ]
            - [ 'setTimelyStatusRepository', [ '@repository.timely_status' ] ]
        properties:
            appLogger:              '@logger'
            connection:             '@doctrine.dbal.default_connection'
            registry:               '@doctrine'

    twitter.repository.read.status:
        class:  'App\Twitter\Infrastructure\Http\Repository\StatusRepository'
        arguments:
            - '@Doctrine\Common\Persistence\ManagerRegistry'
            - 'App\Twitter\Infrastructure\Http\Entity\Status'
        calls:
            - [ 'setMemberRepository',       [ '@user_manager' ] ]
            - [ 'setPublicationRepository',  [ '@App\Twitter\Infrastructure\Publication\Repository\PublicationRepository' ] ]
            - [ 'setStatusLogger',           [ '@App\Twitter\Infrastructure\Log\StatusLogger' ] ]
            - [ 'setTaggedStatusRepository', [ '@App\Twitter\Infrastructure\Repository\Status\TaggedStatusRepository' ] ]
            - [ 'setTimelyStatusRepository', [ '@repository.timely_status' ] ]
        properties:
            registry:               '@doctrine'
            statusLogger:           '@monolog.logger.status'
            connection:             '@doctrine.dbal.default_connection'

    App\Twitter\Infrastructure\Repository\Status\TaggedStatusRepository:
        class: 'App\Twitter\Infrastructure\Repository\Status\TaggedStatusRepository'
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@logger'

    App\Twitter\Infrastructure\Http\Accessor:
        class: 'App\Twitter\Infrastructure\Http\Accessor'
        arguments:
            - '%twitter.consumer_key%'
            - '%twitter.consumer_secret%'
            - '%twitter.oauth_token.default%'
            - '%twitter.oauth_secret.default%'
            - '@repository.access_token'
            - '@logger'
        properties:
            environment:          '%kernel.environment%'
            twitterApiLogger:     '@monolog.logger.twitter_api'
            statusAccessor:       '@App\Twitter\Infrastructure\Http\Accessor\StatusAccessor'
        calls:
            - [ 'setClientClass', [ '\Goutte\Client' ] ]
            - [ 'setConsumerKey', [ '%twitter.consumer_key%' ] ]
            - [ 'setConsumerSecret', [ '%twitter.consumer_secret%' ] ]
            - [ 'setMemberRepository', [ '@user_manager' ] ]
            - [ 'setModerator', [ '@App\Twitter\Infrastructure\Http\Moderator\ApiLimitModerator' ] ]
            - [ 'setTranslator', [ '@App\Twitter\Infrastructure\Translation\Translator' ] ]
            - [ 'setUserSecret', [ '%twitter.oauth_secret.default%' ] ]
            - [ 'setUserToken', [ '%twitter.oauth_token.default%' ] ]

    App\Twitter\Infrastructure\Http\Accessor\StatusAccessor:
        class: 'App\Twitter\Infrastructure\Http\Accessor\StatusAccessor'
        properties:
            archivedStatusRepository:   '@App\Twitter\Infrastructure\Http\Repository\ArchivedStatusRepository'
            entityManager:              '@doctrine.orm.entity_manager'
            notFoundStatusRepository:   '@repository.not_found_status'
        calls:
            - [ 'setApiAccessor',                               [ '@App\Twitter\Infrastructure\Http\Accessor' ] ]
            - [ 'setLogger',                                    [ '@logger' ] ]
            - [ 'setMemberRepository',                          [ '@App\Twitter\Infrastructure\Repository\Membership\MemberRepository' ] ]
            - [ 'setMemberProfileCollectedEventRepository',     [ '@App\Twitter\Infrastructure\Curation\Repository\MemberProfileCollectedEventRepository'] ]
            - [ 'setPublicationPersistence',                    [ '@App\Twitter\Infrastructure\Publication\Persistence\PublicationPersistence' ] ]
            - [ 'setStatusRepository',                          [ '@App\Twitter\Infrastructure\Http\Repository\StatusRepository' ] ]
        public: true

    app.cache.redis:
        class: '%redis_cache.class%'
        arguments:
            - "%redis_host%"
            - "%redis_port%"

    App\Twitter\Infrastructure\Cache\RedisCache: '@app.cache.redis'

    App\Twitter\Infrastructure\Http\Moderator\ApiLimitModerator:
        class:  'App\Twitter\Infrastructure\Http\Moderator\ApiLimitModerator'
        arguments:
            - '@?logger'

    App\Twitter\Infrastructure\Translation\Translator:
        class: 'App\Twitter\Infrastructure\Translation\Translator'
        arguments:
            - '@translator'
            - '@logger'

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    monolog_channels:
        - 'twitter_api'
        - 'status'
        - 'development'
        - 'membership'

    redis_cache.class:              'App\Twitter\Infrastructure\Cache\RedisCache'

    twitter.consumer_key:           '%env(resolve:API_TWITTER_CONSUMER_KEY)%'
    twitter.consumer_secret:        '%env(resolve:API_TWITTER_CONSUMER_SECRET)%'
    twitter.oauth_token.default:    '%env(resolve:API_TWITTER_USER_TOKEN)%'
    twitter.oauth_secret.default:   '%env(resolve:API_TWITTER_USER_SECRET)%'
    twitter.version:                '%env(resolve:API_TWITTER_VERSION)%'

    allowed.origin:                 '%env(resolve:ALLOWED_ORIGIN)%'

    redis_host:                     '%env(resolve:REDIS_HOST)%'
    redis_port:                     '%env(resolve:REDIS_PORT)%'

    list_default:                   '%env(resolve:LIST_DEFAULT)%'

    media_directory:                '%kernel.project_dir%/src/Media/Resources'